# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: codethestudent/iot-token-service:latest

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # with:
        #   ref: main

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

        #설정값 주입
        #      - name: Set prod
        #        uses: microsoft/variable-substitution@v1
        #        with:
        #          files: ./src/main/resources/application-prod.yml
        #        env:
        #          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
        #          spring.data.redis.port: ${{ secrets.REDIS_PORT }}
        #          jwt.private-key: ${{ secrets.JWT_PRIVATE_KEY }}
        #          jwt.public-key: ${{ secrets.JWT_PUBLIC_KEY }}
        #          service.user-url: ${{ secrets.USER_URL }}
        #          service.front-url: ${{ secrets.FRONT_URL }}

        #      - name: Setup Gradle
        #        uses: gradle/gradle-build-action@v2
        #        with:
        #          gradle-version: 8.5
        #
        #      - name: Check gradle version
        #        run: gradle --version
        #
        #      - name: ls
        #        run: ls -R
        #
        #      - name: Build with Gradle Wrapper
        #        run: ./gradlew build

        # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
        # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
        #
        # - name: Setup Gradle
        #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        #   with:
        #     gradle-version: '8.9'
        #
        # - name: Build with Gradle 8.9
        #   run: gradle build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker buildx create --use --name singlearch || docker buildx use singlearch
          docker buildx build \
            --platform linux/amd64 \
            -t $DOCKER_IMAGE \
            --push .

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 5. 서버에 배포
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          # port: 22
          script: |
            export PUBLIC_KEY=${{ secrets.PUBLIC_KEY }}
            export PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
            export REDIS_HOST=${{ secrets.REDIS_HOST }}
            export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            export REDIS_PORT=${{ secrets.REDIS_PORT }}
            export USER_URL=${{ secrets.USER_URL }}
            export FRONT_URL=${{ secrets.FRONT_URL }}
            export OAUTH_ID_GITHUB=${{ secrets.OAUTH_ID_GITHUB }}
            export OAUTH_ID_GOOGLE=${{ secrets.OAUTH_ID_GOOGLE }}
            export OAUTH_SECRET_GITHUB=${{ secrets.OAUTH_SECRET_GITHUB }}
            export OAUTH_SECRET_GOOGLE=${{ secrets.OAUTH_SECRET_GOOGLE }}
            export DOORAY_API_TOKEN=${{ secrets.DOORAY_API_TOKEN }}
            export DOCKER_IMAGE=codethestudent/iot-token-service:latest
            
            cd docker-compose
            git config credential.helper store
            git pull https://${{ secrets.GIT_USER }}:${{ secrets.GIT_PASS }}@github.com/GN-TA/docker-compose.git main
            
            docker pull $DOCKER_IMAGE
            docker compose pull token-service
            docker compose up -d token-service


  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
